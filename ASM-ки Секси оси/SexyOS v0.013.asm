#make_boot#

org 7c00h      ; set location counter.  

;  mov ax, 03
;  int 10h
  xor ax,ax
  xor bx,bx  
  xor cx,cx
  xor dx,dx
  jmp DGraphics
  
DText:
	
  xor ax,ax
  xor bx,bx  
  xor cx,cx
  xor dx,dx
	
  MOV    AH,  13h             ;????? ??????? 13h
  MOV    AL,  1               ;????????? ?????? ? ????? ??????
  MOV    CX,  10              ;????? ??????
  MOV    BL,  00011110b       ;?????? ????? ?? ????? ????
  MOV    DL,  1               ;?????????? ?
  MOV    DH,  2               ;?????????? Y
  MOV    BP,  offset stroka   ;????? ?????? ?????????? ? DX                             
  int 10h
  
  MOV    AH,  13h             ;????? ??????? 13h
  MOV    AL,  1               ;????????? ?????? ? ????? ??????
  MOV    CX,  35              ;????? ??????
  MOV    BL,  00011110b       ;?????? ????? ?? ????? ????
  MOV    DL,  1               ;?????????? X
  MOV    DH,  3               ;?????????? Y
  MOV    BP,  offset stroka1   ;????? ?????? ?????????? ? DX 
  int 10h
  
  xor ax,ax
  xor bx,bx  
  xor cx,cx
  xor dx,dx
  jmp $	
stroka1   DB	'Ua skinul dannie tvoego PC v FSB)))' ;?????? ??? ??????	
stroka   DB	'Hello,User' ;?????? ??? ??????   

DGraphics:   
count   equ 700;?????????? ?????-?????
szH equ 150;?????? ?? ?????????
szV equ 105;????? ?? ????????
plusH   equ 100;??? ?? ?????????
plusV   equ 900;??? ?? ?????????
delta   equ 100;? ??? ??? ???????, ???????? ?? ???? ? ????? ??????????


    mov ax,13h
    int 10h
    mov bx,1
    mov cx,count
    mov si,10
    mov di,20
    mov dh,15
    mov dl,15
    MOV AL,1
@@00:   call    squere
    add bx,delta
    add si,plusH
    add di,plusV
    inc al
    loop    @@00
    xor ax,ax
    int 16h
    ret
squere  proc
    push    ax
    push    cx
    push    dx
    push    si
    push    di
    mov ah,0Ch
    mov cx,szv
@@01:   push    cx
    push    si
    mov cx,szH
    add cx,bx
    push    bx
@@02:   push    cx
    xor bx,bx
    mov cx,si
    mov dx,di
    int 10h
    inc si
    pop cx
    loop    @@02
    pop bx
    pop si
    inc di
    pop cx
    loop    @@01
    pop di
    pop si
    pop dx
    pop cx
    pop ax
    jmp DText
